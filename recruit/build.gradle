plugins {
    id 'java'
    id "org.springframework.boot" version "2.2.2.RELEASE"
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "io.freefair.lombok" version "5.0.0"

    id 'java-library'
    id "jacoco"
    id "com.github.kt3k.coveralls" version "2.10.1"

    id 'org.hidetake.swagger.generator' version '2.18.2'
    id 'com.google.cloud.tools.jib' version '0.9.0'

    id 'org.liquibase.gradle' version "${liquibase_plugin_version}"
}
jib.to.image = 'slipping-image'

repositories {
    jcenter()
}

dependencies {

    implementation project(':assertions')
    implementation project(':eventstore')

    implementation 'org.springframework.boot:spring-boot-starter-aop'


    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.projectlombok:lombok'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'

    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.4.1'
    implementation 'io.swagger:swagger-annotations:1.5.22'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'mysql:mysql-connector-java'
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
    implementation "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime "mysql:mysql-connector-java"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
    liquibaseRuntime sourceSets.main.compileClasspath

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'com.tngtech.archunit:archunit-junit5:0.13.1'

}

swaggerSources {
    franchise {
        inputFile = file('swagger/franchise-swagger.yaml')
        code {
            language = 'Slipp'
            components = ['models', 'apis']
            configFile = file("swagger/franchise-config.json")
            outputDir = file("$projectDir/src/main/generated")
            wipeOutputDir = false

            dependsOn validation
        }
    }
}
dependencies {
    swaggerCodegen project(':slippcodegen')
}

swaggerSources*.code*.dependsOn ':slippcodegen:jar'
compileJava.dependsOn swaggerSources.franchise.code
sourceSets.main.java.srcDir "${swaggerSources.franchise.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.franchise.code.outputDir}/src/main/resources"

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}


if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

liquibase {
    activities {
        main {
            driver "com.mysql.cj.jdbc.Driver"
            url "jdbc:mysql://localhost:3377/slipping"
            username "root"
            password ""
            changeLogFile "src/main/resources/config/liquibase/master.xml"
            defaultSchemaName "slipping"
            logLevel "debug"
            classpath "src/main/resources/"
        }
        diffLog {
            driver "com.mysql.cj.jdbc.Driver"
            url "jdbc:mysql://localhost:3377/slipping"
            username "root"
            password ""
            changeLogFile project.ext.diffChangelogFile
            referenceUrl "hibernate:spring:net.slipp.franchise.domain.model?dialect=org.hibernate.dialect.MySQL8Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
            defaultSchemaName "slipping"
            logLevel "debug"
            classpath "$buildDir/classes/java/main"
        }
    }

    runList = project.ext.runList
}

task dockerComposeUp(type: Exec) {
    group = 'mysql'
    commandLine "docker-compose", "-f", "src/main/docker/mysql.yml", "up", "-d"
}

task dockerComposeDown(type: Exec) {
    group = 'mysql'
    commandLine "docker-compose", "-f", "src/main/docker/mysql" +
        ".yml", "down"
}

if (System.env['BOOTSTRAP_DOCKER'] == null) {
    bootRun.dependsOn dockerComposeUp
    bootRun.finalizedBy dockerComposeDown

    test.dependsOn dockerComposeUp
    test.finalizedBy dockerComposeDown
}

